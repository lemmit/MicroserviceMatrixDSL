//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\users\michal\documents\visual studio 2013\Projects\MSDL\MSDL\microservice_description_language.g4 by ANTLR 4.3

// Unreachable code detected

using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Tree;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MicroserviceMatrixDSL.AntlrBasedTranspiler.Generated {
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class microservice_description_languageParser : Parser {
	public const int
		COMMUNICATION=1, DEFAULT=2, CLASS=3, MESSAGE=4, IS=5, SENDS=6, LIKE=7, 
		AND=8, WITH=9, NAMESPACE=10, MICROSERVICE=11, USING=12, RECEIVES=13, RESPONDS=14, 
		WS=15, LETTER=16, ID=17, ID_=18, INT=19, COMMENT=20;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'communication'", "'default'", "'class'", "'message'", "'is'", 
		"'sends'", "'like'", "'and'", "'with'", "'namespace'", "'microservice'", 
		"'using'", "'receives'", "'responds'", "WS", "LETTER", "ID", "ID_", "INT", 
		"COMMENT"
	};
	public const int
		RULE_microservice_description_language = 0, RULE_statement = 1, RULE_default_message_namespace_declaration = 2, 
		RULE_default_microservice_namespace_declaration = 3, RULE_default_communication_declaration = 4, 
		RULE_microservice_declaration = 5, RULE_microservice_description = 6, 
		RULE_received_message_declaration = 7, RULE_sended_message_declaration = 8, 
		RULE_mixin_declaration = 9, RULE_used_communication = 10, RULE_message_declaration = 11, 
		RULE_message_description = 12;
	public static readonly string[] ruleNames = {
		"microservice_description_language", "statement", "default_message_namespace_declaration", 
		"default_microservice_namespace_declaration", "default_communication_declaration", 
		"microservice_declaration", "microservice_description", "received_message_declaration", 
		"sended_message_declaration", "mixin_declaration", "used_communication", 
		"message_declaration", "message_description"
	};

	public override string GrammarFileName { get { return "microservice_description_language.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public microservice_description_languageParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Microservice_description_languageContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> COMMENT() { return GetTokens(microservice_description_languageParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(microservice_description_languageParser.COMMENT, i);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public Microservice_description_languageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microservice_description_language; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterMicroservice_description_language(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitMicroservice_description_language(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMicroservice_description_language(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Microservice_description_languageContext microservice_description_language() {
		Microservice_description_languageContext _localctx = new Microservice_description_languageContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_microservice_description_language);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 28;
				switch (_input.La(1)) {
				case DEFAULT:
				case MESSAGE:
				case MICROSERVICE:
					{
					State = 26; statement();
					}
					break;
				case COMMENT:
					{
					State = 27; Match(COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 30;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << MESSAGE) | (1L << MICROSERVICE) | (1L << COMMENT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Default_communication_declarationContext default_communication_declaration() {
			return GetRuleContext<Default_communication_declarationContext>(0);
		}
		public Default_message_namespace_declarationContext default_message_namespace_declaration() {
			return GetRuleContext<Default_message_namespace_declarationContext>(0);
		}
		public Message_declarationContext message_declaration() {
			return GetRuleContext<Message_declarationContext>(0);
		}
		public Microservice_declarationContext microservice_declaration() {
			return GetRuleContext<Microservice_declarationContext>(0);
		}
		public Default_microservice_namespace_declarationContext default_microservice_namespace_declaration() {
			return GetRuleContext<Default_microservice_namespace_declarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 37;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; default_message_namespace_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; default_microservice_namespace_declaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34; default_communication_declaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 35; message_declaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 36; microservice_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_message_namespace_declarationContext : ParserRuleContext {
		public IToken default_message_namespace;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public IReadOnlyList<ITerminalNode> IS() { return GetTokens(microservice_description_languageParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(microservice_description_languageParser.IS, i);
		}
		public ITerminalNode MESSAGE() { return GetToken(microservice_description_languageParser.MESSAGE, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(microservice_description_languageParser.NAMESPACE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(microservice_description_languageParser.DEFAULT, 0); }
		public Default_message_namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_message_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterDefault_message_namespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitDefault_message_namespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_message_namespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_message_namespace_declarationContext default_message_namespace_declaration() {
		Default_message_namespace_declarationContext _localctx = new Default_message_namespace_declarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_default_message_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(DEFAULT);
			State = 40; Match(MESSAGE);
			State = 41; Match(NAMESPACE);
			State = 45;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IS) {
				{
				{
				State = 42; Match(IS);
				}
				}
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			{
			State = 48; _localctx.default_message_namespace = Match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_microservice_namespace_declarationContext : ParserRuleContext {
		public IToken default_microservice_namespace;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public IReadOnlyList<ITerminalNode> IS() { return GetTokens(microservice_description_languageParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(microservice_description_languageParser.IS, i);
		}
		public IReadOnlyList<ITerminalNode> MICROSERVICE() { return GetTokens(microservice_description_languageParser.MICROSERVICE); }
		public ITerminalNode MICROSERVICE(int i) {
			return GetToken(microservice_description_languageParser.MICROSERVICE, i);
		}
		public ITerminalNode NAMESPACE() { return GetToken(microservice_description_languageParser.NAMESPACE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(microservice_description_languageParser.DEFAULT, 0); }
		public Default_microservice_namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_microservice_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterDefault_microservice_namespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitDefault_microservice_namespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_microservice_namespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_microservice_namespace_declarationContext default_microservice_namespace_declaration() {
		Default_microservice_namespace_declarationContext _localctx = new Default_microservice_namespace_declarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_default_microservice_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(DEFAULT);
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MICROSERVICE) {
				{
				{
				State = 51; Match(MICROSERVICE);
				}
				}
				State = 56;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 57; Match(NAMESPACE);
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IS) {
				{
				{
				State = 58; Match(IS);
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			{
			State = 64; _localctx.default_microservice_namespace = Match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_communication_declarationContext : ParserRuleContext {
		public IToken communication_name;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public IReadOnlyList<ITerminalNode> IS() { return GetTokens(microservice_description_languageParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(microservice_description_languageParser.IS, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(microservice_description_languageParser.DEFAULT, 0); }
		public ITerminalNode COMMUNICATION() { return GetToken(microservice_description_languageParser.COMMUNICATION, 0); }
		public Default_communication_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_communication_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterDefault_communication_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitDefault_communication_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_communication_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_communication_declarationContext default_communication_declaration() {
		Default_communication_declarationContext _localctx = new Default_communication_declarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_default_communication_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(DEFAULT);
			State = 67; Match(COMMUNICATION);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IS) {
				{
				{
				State = 68; Match(IS);
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			{
			State = 74; _localctx.communication_name = Match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Microservice_declarationContext : ParserRuleContext {
		public IToken microservice_name;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public ITerminalNode MICROSERVICE() { return GetToken(microservice_description_languageParser.MICROSERVICE, 0); }
		public IReadOnlyList<Microservice_descriptionContext> microservice_description() {
			return GetRuleContexts<Microservice_descriptionContext>();
		}
		public Microservice_descriptionContext microservice_description(int i) {
			return GetRuleContext<Microservice_descriptionContext>(i);
		}
		public Microservice_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microservice_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterMicroservice_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitMicroservice_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMicroservice_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Microservice_declarationContext microservice_declaration() {
		Microservice_declarationContext _localctx = new Microservice_declarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_microservice_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(MICROSERVICE);
			{
			State = 77; _localctx.microservice_name = Match(ID);
			}
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SENDS) | (1L << LIKE) | (1L << USING) | (1L << RECEIVES))) != 0)) {
				{
				{
				State = 78; microservice_description();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Microservice_descriptionContext : ParserRuleContext {
		public Used_communicationContext used_communication() {
			return GetRuleContext<Used_communicationContext>(0);
		}
		public Received_message_declarationContext received_message_declaration() {
			return GetRuleContext<Received_message_declarationContext>(0);
		}
		public Sended_message_declarationContext sended_message_declaration() {
			return GetRuleContext<Sended_message_declarationContext>(0);
		}
		public Mixin_declarationContext mixin_declaration() {
			return GetRuleContext<Mixin_declarationContext>(0);
		}
		public Microservice_descriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microservice_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterMicroservice_description(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitMicroservice_description(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMicroservice_description(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Microservice_descriptionContext microservice_description() {
		Microservice_descriptionContext _localctx = new Microservice_descriptionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_microservice_description);
		try {
			State = 88;
			switch (_input.La(1)) {
			case RECEIVES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; received_message_declaration();
				}
				break;
			case SENDS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; sended_message_declaration();
				}
				break;
			case LIKE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 86; mixin_declaration();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87; used_communication();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Received_message_declarationContext : ParserRuleContext {
		public IToken receives;
		public IToken responds;
		public ITerminalNode RECEIVES() { return GetToken(microservice_description_languageParser.RECEIVES, 0); }
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(microservice_description_languageParser.ID); }
		public ITerminalNode RESPONDS() { return GetToken(microservice_description_languageParser.RESPONDS, 0); }
		public ITerminalNode AND(int i) {
			return GetToken(microservice_description_languageParser.AND, i);
		}
		public IReadOnlyList<ITerminalNode> WITH() { return GetTokens(microservice_description_languageParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(microservice_description_languageParser.WITH, i);
		}
		public IReadOnlyList<ITerminalNode> AND() { return GetTokens(microservice_description_languageParser.AND); }
		public ITerminalNode ID(int i) {
			return GetToken(microservice_description_languageParser.ID, i);
		}
		public Received_message_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_received_message_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterReceived_message_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitReceived_message_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceived_message_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Received_message_declarationContext received_message_declaration() {
		Received_message_declarationContext _localctx = new Received_message_declarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_received_message_declaration);
		int _la;
		try {
			State = 108;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 90; Match(RECEIVES);
				{
				State = 91; _localctx.receives = Match(ID);
				}
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 92; Match(RECEIVES);
				{
				State = 93; _localctx.receives = Match(ID);
				}
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AND) {
					{
					{
					State = 94; Match(AND);
					}
					}
					State = 99;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 100; Match(RESPONDS);
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==WITH) {
					{
					{
					State = 101; Match(WITH);
					}
					}
					State = 106;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				{
				State = 107; _localctx.responds = Match(ID);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sended_message_declarationContext : ParserRuleContext {
		public IToken sends;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public ITerminalNode SENDS() { return GetToken(microservice_description_languageParser.SENDS, 0); }
		public Sended_message_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sended_message_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterSended_message_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitSended_message_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSended_message_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sended_message_declarationContext sended_message_declaration() {
		Sended_message_declarationContext _localctx = new Sended_message_declarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_sended_message_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(SENDS);
			{
			State = 111; _localctx.sends = Match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_declarationContext : ParserRuleContext {
		public IToken like_microservice;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public ITerminalNode LIKE() { return GetToken(microservice_description_languageParser.LIKE, 0); }
		public Mixin_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterMixin_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitMixin_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_declarationContext mixin_declaration() {
		Mixin_declarationContext _localctx = new Mixin_declarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_mixin_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(LIKE);
			{
			State = 114; _localctx.like_microservice = Match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Used_communicationContext : ParserRuleContext {
		public IToken communication_name;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public ITerminalNode COMMUNICATION(int i) {
			return GetToken(microservice_description_languageParser.COMMUNICATION, i);
		}
		public ITerminalNode USING() { return GetToken(microservice_description_languageParser.USING, 0); }
		public IReadOnlyList<ITerminalNode> COMMUNICATION() { return GetTokens(microservice_description_languageParser.COMMUNICATION); }
		public Used_communicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_used_communication; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterUsed_communication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitUsed_communication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsed_communication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Used_communicationContext used_communication() {
		Used_communicationContext _localctx = new Used_communicationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_used_communication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(USING);
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMUNICATION) {
				{
				{
				State = 117; Match(COMMUNICATION);
				}
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			{
			State = 123; _localctx.communication_name = Match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_declarationContext : ParserRuleContext {
		public IToken message_name;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public ITerminalNode MESSAGE() { return GetToken(microservice_description_languageParser.MESSAGE, 0); }
		public IReadOnlyList<Message_descriptionContext> message_description() {
			return GetRuleContexts<Message_descriptionContext>();
		}
		public ITerminalNode CLASS() { return GetToken(microservice_description_languageParser.CLASS, 0); }
		public Message_descriptionContext message_description(int i) {
			return GetRuleContext<Message_descriptionContext>(i);
		}
		public Message_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterMessage_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitMessage_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Message_declarationContext message_declaration() {
		Message_declarationContext _localctx = new Message_declarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_message_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(MESSAGE);
			State = 126; Match(CLASS);
			{
			State = 127; _localctx.message_name = Match(ID);
			}
			State = 131;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==USING) {
				{
				{
				State = 128; message_description();
				}
				}
				State = 133;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_descriptionContext : ParserRuleContext {
		public IToken @namespace;
		public ITerminalNode ID() { return GetToken(microservice_description_languageParser.ID, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(microservice_description_languageParser.NAMESPACE, 0); }
		public ITerminalNode USING() { return GetToken(microservice_description_languageParser.USING, 0); }
		public Message_descriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.EnterMessage_description(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Imicroservice_description_languageListener typedListener = listener as Imicroservice_description_languageListener;
			if (typedListener != null) typedListener.ExitMessage_description(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Imicroservice_description_languageVisitor<TResult> typedVisitor = visitor as Imicroservice_description_languageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage_description(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Message_descriptionContext message_description() {
		Message_descriptionContext _localctx = new Message_descriptionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_message_description);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(USING);
			State = 135; Match(NAMESPACE);
			{
			State = 136; _localctx.@namespace = Match(ID);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x16\x8D\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x6\x2"+
		"\x1F\n\x2\r\x2\xE\x2 \x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3(\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\a\x4.\n\x4\f\x4\xE\x4\x31\v\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\a\x5\x37\n\x5\f\x5\xE\x5:\v\x5\x3\x5\x3\x5\a\x5>\n\x5\f\x5\xE\x5\x41"+
		"\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\a\x6H\n\x6\f\x6\xE\x6K\v\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\a\aR\n\a\f\a\xE\aU\v\a\x3\b\x3\b\x3\b\x3\b\x5\b"+
		"[\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x62\n\t\f\t\xE\t\x65\v\t\x3\t\x3\t"+
		"\a\ti\n\t\f\t\xE\tl\v\t\x3\t\x5\to\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\f\x3\f\a\fy\n\f\f\f\xE\f|\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\x84\n"+
		"\r\f\r\xE\r\x87\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x2\x2\x2\xF\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x2\x2\x92\x2\x1E\x3\x2\x2\x2\x4\'\x3\x2\x2\x2\x6)\x3\x2\x2\x2\b\x34"+
		"\x3\x2\x2\x2\n\x44\x3\x2\x2\x2\fN\x3\x2\x2\x2\xEZ\x3\x2\x2\x2\x10n\x3"+
		"\x2\x2\x2\x12p\x3\x2\x2\x2\x14s\x3\x2\x2\x2\x16v\x3\x2\x2\x2\x18\x7F\x3"+
		"\x2\x2\x2\x1A\x88\x3\x2\x2\x2\x1C\x1F\x5\x4\x3\x2\x1D\x1F\a\x16\x2\x2"+
		"\x1E\x1C\x3\x2\x2\x2\x1E\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2 \x1E\x3\x2\x2"+
		"\x2 !\x3\x2\x2\x2!\x3\x3\x2\x2\x2\"(\x5\x6\x4\x2#(\x5\b\x5\x2$(\x5\n\x6"+
		"\x2%(\x5\x18\r\x2&(\x5\f\a\x2\'\"\x3\x2\x2\x2\'#\x3\x2\x2\x2\'$\x3\x2"+
		"\x2\x2\'%\x3\x2\x2\x2\'&\x3\x2\x2\x2(\x5\x3\x2\x2\x2)*\a\x4\x2\x2*+\a"+
		"\x6\x2\x2+/\a\f\x2\x2,.\a\a\x2\x2-,\x3\x2\x2\x2.\x31\x3\x2\x2\x2/-\x3"+
		"\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x32\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33"+
		"\a\x13\x2\x2\x33\a\x3\x2\x2\x2\x34\x38\a\x4\x2\x2\x35\x37\a\r\x2\x2\x36"+
		"\x35\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2"+
		"\x2\x39;\x3\x2\x2\x2:\x38\x3\x2\x2\x2;?\a\f\x2\x2<>\a\a\x2\x2=<\x3\x2"+
		"\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\x42\x3\x2\x2\x2\x41"+
		"?\x3\x2\x2\x2\x42\x43\a\x13\x2\x2\x43\t\x3\x2\x2\x2\x44\x45\a\x4\x2\x2"+
		"\x45I\a\x3\x2\x2\x46H\a\a\x2\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2"+
		"\x2\x2IJ\x3\x2\x2\x2JL\x3\x2\x2\x2KI\x3\x2\x2\x2LM\a\x13\x2\x2M\v\x3\x2"+
		"\x2\x2NO\a\r\x2\x2OS\a\x13\x2\x2PR\x5\xE\b\x2QP\x3\x2\x2\x2RU\x3\x2\x2"+
		"\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2T\r\x3\x2\x2\x2US\x3\x2\x2\x2V[\x5\x10"+
		"\t\x2W[\x5\x12\n\x2X[\x5\x14\v\x2Y[\x5\x16\f\x2ZV\x3\x2\x2\x2ZW\x3\x2"+
		"\x2\x2ZX\x3\x2\x2\x2ZY\x3\x2\x2\x2[\xF\x3\x2\x2\x2\\]\a\xF\x2\x2]o\a\x13"+
		"\x2\x2^_\a\xF\x2\x2_\x63\a\x13\x2\x2`\x62\a\n\x2\x2\x61`\x3\x2\x2\x2\x62"+
		"\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2"+
		"\x2\x2\x65\x63\x3\x2\x2\x2\x66j\a\x10\x2\x2gi\a\v\x2\x2hg\x3\x2\x2\x2"+
		"il\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2lj\x3\x2\x2\x2"+
		"mo\a\x13\x2\x2n\\\x3\x2\x2\x2n^\x3\x2\x2\x2o\x11\x3\x2\x2\x2pq\a\b\x2"+
		"\x2qr\a\x13\x2\x2r\x13\x3\x2\x2\x2st\a\t\x2\x2tu\a\x13\x2\x2u\x15\x3\x2"+
		"\x2\x2vz\a\xE\x2\x2wy\a\x3\x2\x2xw\x3\x2\x2\x2y|\x3\x2\x2\x2zx\x3\x2\x2"+
		"\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}~\a\x13\x2\x2~\x17\x3\x2"+
		"\x2\x2\x7F\x80\a\x6\x2\x2\x80\x81\a\x5\x2\x2\x81\x85\a\x13\x2\x2\x82\x84"+
		"\x5\x1A\xE\x2\x83\x82\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2"+
		"\x2\x85\x86\x3\x2\x2\x2\x86\x19\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x89"+
		"\a\xE\x2\x2\x89\x8A\a\f\x2\x2\x8A\x8B\a\x13\x2\x2\x8B\x1B\x3\x2\x2\x2"+
		"\x10\x1E \'/\x38?ISZ\x63jnz\x85";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MSDL
